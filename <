/*
 * Licence: GPL
 * Created: Wed, 20 Apr 2016 18:36:21 +0200
 * Main authors:
 *     - hoel <hoel.vasseur@openwide.fr>
 */


#include <glib-2.0/glib.h>

#include <gstreamer-1.0/gst/gst.h>
#include <gst/video/video.h>
#include <gstreamer-1.0/gst/app/gstappsrc.h>
#include <gstreamer-1.0/gst/app/gstappsink.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "../../include/mibParameters.h"
#include "../../include/log.h"
#include "../../include/videoFormatInfo/videoFormatTable.h"
#include "../../include/channelControl/channelTable.h"
#include "../../include/mibParameters.h"
#include "../../include/conf/mib-conf.h"

static void set_roi_values_videoFormat_entry( struct videoFormatTable_entry *video_stream_info ,  roi_data *roi_datas) {
	
	/* set resolution */
	video_stream_info->videoFormatRoiVertRes 		= roi_datas->roi_width;
	video_stream_info->videoFormatRoiHorzRes 		= roi_datas->roi_height;

	/* set values other values */
	video_stream_info->videoFormatRoiOriginTop 		= roi_datas->roi_top;
	video_stream_info->videoFormatRoiOriginLeft 	= roi_datas->roi_left;
	video_stream_info->videoFormatRoiExtentBottom 	= roi_datas->roi_extent_bottom;
	video_stream_info->videoFormatRoiExtentRight 	= roi_datas->roi_extent_right;

}


static gboolean roi_exists ( roi_data *roi_datas ){
	return  ! ( roi_datas->roi_width == 0 && roi_datas->roi_height == 0 && roi_datas->roi_top == 0 && roi_datas->roi_left== 0 );
}

static gboolean roi_is_non_scalable( roi_data *roi_datas) {

	return ( roi_exists ( roi_datas ) && roi_datas->roi_extent_bottom == 0 && roi_datas->roi_extent_right == 0 );

}

static gboolean roi_is_decimated( roi_data *roi_datas) {

	return ( roi_exists( roi_datas ) 																&&
			!roi_is_non_scalable( roi_datas ) 														&&
		   	( roi_datas->roi_width 	< ( roi_datas->roi_extent_right 	- roi_datas->roi_left 	)) 	&&
			( roi_datas->roi_height < ( roi_datas->roi_extent_bottom 	- roi_datas->roi_top 	)) );

}

static gboolean roi_is_interpolated( roi_data *roi_datas) {

	return ( roi_exists( roi_datas ) 																&&
			!roi_is_non_scalable( roi_datas ) 														&&
		   	( roi_datas->roi_width 	> ( roi_datas->roi_extent_right 	- roi_datas->roi_left 	)) 	&&
			( roi_datas->roi_height > ( roi_datas->roi_extent_bottom 	- roi_datas->roi_top 	)) );

}

GstElement *adapt_pipeline_to_roi(GstElement *pipeline, GstElement *input, struct videoFormatTable_entry *video_stream_info  ) {

	GstElement *videoconvert 	= NULL;
	GstElement *videocrop 		= NULL;
	GstElement *videoscale 		= NULL;
	GstElement *last 			= NULL;

	videoconvert = gst_element_factory_make_log ( "videoconvert ", "videoconvert" );
	if ( !videoconvert )
		return NULL;

	if ( !gst_element_link_log (input, videoconvert)){
		gst_bin_remove( GST_BIN (pipeline), videoconvert);
		return NULL;
	}

	input = videoconvert;

	if ( roi_is_non_scalable( roi_datas ) ){

		videocrop = gst_element_factory_make_log ( "videocrop", "videocrop" );
		if ( !videocrop )
			return NULL;
		
		last = videocrop;

	}

	else if ( roi_is_decimated ( roi_datas ) || roi_is_interpolated ( roi_datas ) ){

		videoscale = gst_element_factory_make_log ( "videoscale", "videoscale" );
		if ( !videoscale )
			return NULL;

		last = videocrop;
	
	}

	if ( !gst_element_link_log (input, last)){
		gst_bin_remove( GST_BIN (pipeline), last);
		return NULL;
	}

	return last;

}

gboolean init_video_format_roi( struct videoFormatTable_entry *video_stream_info ) {

	roi_data roi_datas;

	/* retrieve default value from configuration */
	if ( !get_roi_parameters_for_sources ( video_stream_info->videoFormatIndex , &roi_datas) )
		return FALSE;

	/* 
	 * Set the ROI parameter into the videoFormat Entry 
	 * This will initialize the ROI parameters to 0 if they were not specified in the configuration file
	 */
	set_roi_values_videoFormat_entry( video_stream_info , &roi_datas);

		
}


